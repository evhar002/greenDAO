<#--

Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
                                                                           
This file is part of greenDAO Generator.                                   
                                                                           
greenDAO Generator is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by       
the Free Software Foundation, either version 3 of the License, or          
(at your option) any later version.                                        
greenDAO Generator is distributed in the hope that it will be useful,      
but WITHOUT ANY WARRANTY; without even the implied warranty of             
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
GNU General Public License for more details.                               
                                                                           
You should have received a copy of the GNU General Public License          
along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.

-->
<#-- @ftlvariable name="schema" type="org.greenrobot.greendao.generator.Schema" -->
package ${schema.defaultJavaPackageDao}

import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteDatabase.CursorFactory
import android.util.Log

import org.greenrobot.greendao.AbstractDaoMaster
import org.greenrobot.greendao.database.StandardDatabase
import org.greenrobot.greendao.database.Database
import org.greenrobot.greendao.database.DatabaseOpenHelper
import org.greenrobot.greendao.identityscope.IdentityScopeType

<#list schema.entities as entity>
<#if schema.defaultJavaPackageDao != entity.javaPackageDao>
import ${entity.javaPackageDao}.${entity.classNameDao}
</#if>
</#list>

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version ${schema.version?c}): knows all DAOs.
 */
class ${schema.prefix}DaoMaster: AbstractDaoMaster {

    companion object {
        const val SCHEMA_VERSION = ${schema.version?c}

        /** Creates underlying database table using DAOs. */
        fun createAllTables(db:Database, ifNotExists:Boolean) {
    <#list schema.entities as entity>
    <#if !entity.skipCreationInDb>
            ${entity.classNameDao}.createTable(db, ifNotExists)
    </#if>
    </#list>
        }

        /** Drops underlying database table using DAOs. */
        fun dropAllTables(db:Database, ifExists:Boolean) {
    <#list schema.entities as entity>
    <#if !entity.skipCreationInDb>
            ${entity.classNameDao}.dropTable(db, ifExists)
    </#if>
    </#list>
        }

        /**
         * WARNING: Drops all table on Upgrade! Use only during development.
         * Convenience method using a {@link DevOpenHelper}.
         */
        fun newDevSession(Context context, String name) : ${schema.prefix}DaoSession {
            val db:Database = DevOpenHelper(context, name).getWritableDb()
            val daoMaster:${schema.prefix}DaoMaster = ${schema.prefix}DaoMaster(db)
            return daoMaster.newSession()
        }

        /**
         * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
         */
        abstract class OpenHelper: DatabaseOpenHelper {
            constructor(context:Context, name:String ) : super(context, name, SCHEMA_VERSION)

            constructor(context:Context, name:String , factory:CursorFactory): super(context, name, factory, SCHEMA_VERSION)

            override fun onCreate(db:Database) {
                Log.i("greenDAO", "Creating tables for schema version $SCHEMA_VERSION")
                createAllTables(db, false)
            }
        }

        /** WARNING: Drops all table on Upgrade! Use only during development. */
        class DevOpenHelper: OpenHelper {

            constructor(context:Context, name:String ) : super(context, name)
            constructor(context:Context, name:String, factory:CursorFactory) : super(context, name, factory )

            override fun onUpgrade(db:Database, oldVersion:Int, newVersion:Int) {
                Log.i("greenDAO", "Upgrading schema from version $oldVersion to $newVersion by dropping all tables")
                dropAllTables(db, true)
                onCreate(db)
            }
        }
     }

    constructor (db:SQLiteDatabase) : this(StandardDatabase(db))

    constructor (db:Database ) : super(db, SCHEMA_VERSION) {
<#list schema.entities as entity>
        registerDaoClass(${entity.classNameDao}::class.java)
</#list>
    }

    fun newSession() : ${schema.prefix}DaoSession {
        return ${schema.prefix}DaoSession(db, IdentityScopeType.Session, daoConfigMap)
    }

    fun newSession(IdentityScopeType type) : ${schema.prefix}DaoSession {
        return ${schema.prefix}DaoSession(db, type, daoConfigMap)
    }
}
